# NOTE: This file is auto generated by OpenAPI Generator 6.5.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ApacheIcebergRESTCatalogAPI.Api.CatalogAPI do
  @moduledoc """
  API calls for all endpoints tagged `CatalogAPI`.
  """

  alias ApacheIcebergRESTCatalogAPI.Connection
  import ApacheIcebergRESTCatalogAPI.RequestBuilder

  @doc """
  Create a namespace
  Create a namespace, with an optional set of properties. The server might also add properties, such as `last_modified_time` etc.

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `opts` (keyword): Optional parameters
    - `:body` (CreateNamespaceRequest): 

  ### Returns

  - `{:ok, ApacheIcebergRESTCatalogAPI.Model.CreateNamespace200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_namespace(Tesla.Env.client, String.t, keyword()) :: {:ok, ApacheIcebergRESTCatalogAPI.Model.CreateNamespace200Response.t} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def create_namespace(connection, prefix, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/v1/#{prefix}/namespaces")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ApacheIcebergRESTCatalogAPI.Model.CreateNamespace200Response{}},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {406, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {409, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  Create a table in the given namespace
  Create a table or start a create transaction, like atomic CTAS.  If `stage-create` is false, the table is created immediately.  If `stage-create` is true, the table is not created, but table metadata is initialized and returned. The service should prepare as needed for a commit to the table commit endpoint to complete the create transaction. The client uses the returned metadata to begin a transaction. To commit the transaction, the client sends all create and subsequent changes to the table commit route. Changes from the table create operation include changes like AddSchemaUpdate and SetCurrentSchemaUpdate that set the initial table state.

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `namespace` (String.t): A namespace identifier as a single string. Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.
  - `opts` (keyword): Optional parameters
    - `:body` (CreateTableRequest): 

  ### Returns

  - `{:ok, ApacheIcebergRESTCatalogAPI.Model.LoadTableResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_table(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:ok, ApacheIcebergRESTCatalogAPI.Model.LoadTableResult.t} | {:error, Tesla.Env.t}
  def create_table(connection, prefix, namespace, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/v1/#{prefix}/namespaces/#{namespace}/tables")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ApacheIcebergRESTCatalogAPI.Model.LoadTableResult{}},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {409, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  Drop a namespace from the catalog. Namespace must be empty.

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `namespace` (String.t): A namespace identifier as a single string. Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drop_namespace(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def drop_namespace(connection, prefix, namespace, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v1/#{prefix}/namespaces/#{namespace}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  Drop a table from the catalog
  Remove a table from the catalog

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `namespace` (String.t): A namespace identifier as a single string. Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.
  - `table` (String.t): A table name
  - `opts` (keyword): Optional parameters
    - `:purgeRequested` (boolean()): Whether the user requested to purge the underlying table's data and metadata

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drop_table(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def drop_table(connection, prefix, namespace, table, opts \\ []) do
    optional_params = %{
      :purgeRequested => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v1/#{prefix}/namespaces/#{namespace}/tables/#{table}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  List namespaces, optionally providing a parent namespace to list underneath
  List all namespaces at a certain level, optionally starting from a given parent namespace. For example, if table accounting.tax.paid exists, using 'SELECT NAMESPACE IN accounting' would translate into `GET /namespaces?parent=accounting` and must return a namespace, [\"accounting\", \"tax\"]. If `parent` is not provided, all top-level namespaces should be listed.

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `opts` (keyword): Optional parameters
    - `:parent` (String.t): An optional namespace, underneath which to list namespaces. If not provided or empty, all top-level namespaces should be listed. If parent is a multipart namespace, the parts must be separated by the unit separator (`0x1F`) byte.

  ### Returns

  - `{:ok, ApacheIcebergRESTCatalogAPI.Model.ListNamespaces200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_namespaces(Tesla.Env.client, String.t, keyword()) :: {:ok, ApacheIcebergRESTCatalogAPI.Model.ListNamespaces200Response.t} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def list_namespaces(connection, prefix, opts \\ []) do
    optional_params = %{
      :parent => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/#{prefix}/namespaces")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ApacheIcebergRESTCatalogAPI.Model.ListNamespaces200Response{}},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  List all table identifiers underneath a given namespace
  Return all table identifiers under this namespace

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `namespace` (String.t): A namespace identifier as a single string. Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ApacheIcebergRESTCatalogAPI.Model.ListTables200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_tables(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, ApacheIcebergRESTCatalogAPI.Model.ListTables200Response.t} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def list_tables(connection, prefix, namespace, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/#{prefix}/namespaces/#{namespace}/tables")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ApacheIcebergRESTCatalogAPI.Model.ListTables200Response{}},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  Load the metadata properties for a namespace
  Return all stored metadata properties for a given namespace

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `namespace` (String.t): A namespace identifier as a single string. Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ApacheIcebergRESTCatalogAPI.Model.LoadNamespaceMetadata200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec load_namespace_metadata(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, ApacheIcebergRESTCatalogAPI.Model.LoadNamespaceMetadata200Response.t} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def load_namespace_metadata(connection, prefix, namespace, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/#{prefix}/namespaces/#{namespace}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ApacheIcebergRESTCatalogAPI.Model.LoadNamespaceMetadata200Response{}},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  Load a table from the catalog
  Load a table from the catalog.  The response contains both configuration and table metadata. The configuration, if non-empty is used as additional configuration for the table that overrides catalog configuration. For example, this configuration may change the FileIO implementation to be used for the table.  The response also contains the table's full metadata, matching the table metadata JSON file.  The catalog configuration may contain credentials that should be used for subsequent requests for the table. The configuration key \"token\" is used to pass an access token to be used as a bearer token for table requests. Otherwise, a token may be passed using a RFC 8693 token type as a configuration key. For example, \"urn:ietf:params:oauth:token-type:jwt=<JWT-token>\".

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `namespace` (String.t): A namespace identifier as a single string. Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.
  - `table` (String.t): A table name
  - `opts` (keyword): Optional parameters
    - `:snapshots` (String.t): The snapshots to return in the body of the metadata. Setting the value to `all` would return the full set of snapshots currently valid for the table. Setting the value to `refs` would load all snapshots referenced by branches or tags. Default if no param is provided is `all`.

  ### Returns

  - `{:ok, ApacheIcebergRESTCatalogAPI.Model.LoadTableResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec load_table(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:ok, ApacheIcebergRESTCatalogAPI.Model.LoadTableResult.t} | {:error, Tesla.Env.t}
  def load_table(connection, prefix, namespace, table, opts \\ []) do
    optional_params = %{
      :snapshots => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/#{prefix}/namespaces/#{namespace}/tables/#{table}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ApacheIcebergRESTCatalogAPI.Model.LoadTableResult{}},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  Rename a table from its current name to a new name
  Rename a table from one identifier to another. It's valid to move a table across namespaces, but the server implementation is not required to support it.

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `rename_table_request` (RenameTableRequest): Current table identifier to rename and new table identifier to rename to
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rename_table(Tesla.Env.client, String.t, ApacheIcebergRESTCatalogAPI.Model.RenameTableRequest.t, keyword()) :: {:ok, nil} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def rename_table(connection, prefix, rename_table_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/#{prefix}/tables/rename")
      |> add_param(:body, :body, rename_table_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {406, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {409, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  Send a metrics report to this endpoint to be processed by the backend

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `namespace` (String.t): A namespace identifier as a single string. Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.
  - `table` (String.t): A table name
  - `report_metrics_request` (ReportMetricsRequest): The request containing the metrics report to be sent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec report_metrics(Tesla.Env.client, String.t, String.t, String.t, ApacheIcebergRESTCatalogAPI.Model.ReportMetricsRequest.t, keyword()) :: {:ok, nil} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def report_metrics(connection, prefix, namespace, table, report_metrics_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/#{prefix}/namespaces/#{namespace}/tables/#{table}/metrics")
      |> add_param(:body, :body, report_metrics_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  Check if a table exists
  Check if a table exists within a given namespace. This request does not return a response body.

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `namespace` (String.t): A namespace identifier as a single string. Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.
  - `table` (String.t): A table name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec table_exists(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def table_exists(connection, prefix, namespace, table, _opts \\ []) do
    request =
      %{}
      |> method(:head)
      |> url("/v1/#{prefix}/namespaces/#{namespace}/tables/#{table}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {401, false},
      {404, false},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  Set or remove properties on a namespace
  Set and/or remove properties on a namespace. The request body specifies a list of properties to remove and a map of key value pairs to update. Properties that are not in the request are not modified or removed by this call. Server implementations are not required to support namespace properties.

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `namespace` (String.t): A namespace identifier as a single string. Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateNamespacePropertiesRequest): 

  ### Returns

  - `{:ok, ApacheIcebergRESTCatalogAPI.Model.UpdateProperties200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_properties(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, ApacheIcebergRESTCatalogAPI.Model.UpdateProperties200Response.t} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def update_properties(connection, prefix, namespace, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/v1/#{prefix}/namespaces/#{namespace}/properties")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ApacheIcebergRESTCatalogAPI.Model.UpdateProperties200Response{}},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {406, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {422, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end

  @doc """
  Commit updates to a table
  Commit updates to a table.  Commits have two parts, requirements and updates. Requirements are assertions that will be validated before attempting to make and commit changes. For example, `assert-ref-snapshot-id` will check that a named ref's snapshot ID has a certain value.  Updates are changes to make to table metadata. For example, after asserting that the current main ref is at the expected snapshot, a commit may add a new child snapshot and set the ref to the new snapshot id.  Create table transactions that are started by createTable with `stage-create` set to true are committed using this route. Transactions should include all changes to the table, including table initialization, like AddSchemaUpdate and SetCurrentSchemaUpdate. The `assert-create` requirement is used to ensure that the table was not created concurrently.

  ### Parameters

  - `connection` (ApacheIcebergRESTCatalogAPI.Connection): Connection to server
  - `prefix` (String.t): An optional prefix in the path
  - `namespace` (String.t): A namespace identifier as a single string. Multipart namespace parts should be separated by the unit separator (`0x1F`) byte.
  - `table` (String.t): A table name
  - `opts` (keyword): Optional parameters
    - `:body` (CommitTableRequest): 

  ### Returns

  - `{:ok, ApacheIcebergRESTCatalogAPI.Model.UpdateTable200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_table(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, ApacheIcebergRESTCatalogAPI.Model.UpdateTable200Response.t} | {:ok, ApacheIcebergRESTCatalogAPI.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def update_table(connection, prefix, namespace, table, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/v1/#{prefix}/namespaces/#{namespace}/tables/#{table}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ApacheIcebergRESTCatalogAPI.Model.UpdateTable200Response{}},
      {400, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {401, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {403, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {404, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {409, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {419, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {500, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {503, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {502, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {504, %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}},
      {"5XX", %ApacheIcebergRESTCatalogAPI.Model.ErrorModel{}}
    ])
  end
end
